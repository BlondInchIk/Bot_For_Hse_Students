import telebot
from telebot import types
from db import user_exists, get_user_id, add_user, add_record, delete_, output, get_all
import time
from anekdots import Anecdots
from mg import get_map_cell
from request_hse import rasp, rasp_cool
from telebot import types
from database import Database

bot=telebot.TeleBot('5097289263:AAHGLV3QXx8CgK6U5JQEIjut7N67NDKCiL4')
db = Database('db.db')
FIO = ''

'''–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –Ω—ë–º'''
@bot.message_handler(commands = ["start"])
def start(message):
    '''–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã telegram bot'a –∏ –∑–∞–ø—É—Å–∫–∞ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'''
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row("/add","/delete")
    user_markup.row("/play","/show")
    user_markup.row("/chat","/location")
    user_markup.row("/joke")
    bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥...')
    time.sleep(1)
    bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Ç,...–¥—Ä—É–≥?')
    time.sleep(1)
    bot.send_message(message.from_user.id,'–ß—É—à—å –∫–∞–∫–∞—è... –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –¥–∞—Ç—å —Ç–µ–±–µ –∏–º—è? –ù–æ —ç—Ç–æ —Å–∫–æ–ª—å–∑–∫–∞—è –¥–æ—Ä–æ–∂–∫–∞. –¢—ã —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è –≤ –≥–æ–ª–æ–≤–µ - –Ω–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ –∑–∞–±—ã–≤–∞—Ç—å.')
    time.sleep(3)
    bot.send_message(message.from_user.id,'–ß—ë—Ä—Ç! –Ø –∏ –ø—Ä–∞–≤–¥–∞ –≥–æ–≤–æ—Ä—é —Å –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º...')
    time.sleep(1)
    bot.send_message(message.from_user.id,'–¢–æ, —á—Ç–æ —è —Ä–∞—Å—Å–∫–∞–∂—É - —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–≤–æ—Ä –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö –Ω–∞—Å. –ú–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ª—é–¥–µ–π —Ç–∞–π–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–π –í—ã—Å—à–µ–π –®–∫–æ–ª–æ–π –≠–∫–æ–Ω–æ–º–∏–∫–∏.')
    time.sleep(4)
    bot.send_message(message.from_user.id,"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —ç—Ç–æ –Ω–µ–ª–µ–≥–∫–æ–µ –≤—Ä–µ–º—è \n\n –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–µ–π —Å–∏–ª–æ–π: \n\n/add - –≤—Å—Ç—É–ø–∏—Ç—å –≤ –º–æ–π –∫–ª–∞–Ω\n/delete - –¥–µ–∑–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç—Ä—É—Å -_-\n"
                                          "/play - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞—Ö –ø–æ –ê–∏–ü\n/show - —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–∏—Ö –±—É–¥—É—â–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π\n/chat - —Å—Ö–æ–¥–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–ª–∫–æ–≥–æ–ª–∏–∫–æ–≤"
                                          "\n/location - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–æ–≤\n/joke - –µ—Å–ª–∏ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ, —Ç–µ–±–µ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É—Ç –Ω–∞—à–∏ –æ–∫–æ–ª–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —à—É—Ç–∫–∏", reply_markup = user_markup)

@bot.message_handler(commands = ["delete"])
def delete(message):
    '''–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–¥'''
    bot.send_message(message.from_user.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?")
    bot.register_next_step_handler(message, delete2)
def delete2(message):
    '''–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–¥'''
    if message.text == "–î–∞" or message.text == "–¥–∞":
        delete_(message.chat.id)
    if message.text == "–ù–µ—Ç" or message.text == "–Ω–µ—Ç":
        bot.send_message(message.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:(")

@bot.message_handler(commands = ["show"])
def output_(message):
    '''–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã–≤–æ–¥ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    bot.send_message(message.from_user.id, rasp_cool(output(message.from_user.id)))

@bot.message_handler(commands = ["joke"])
def get_joke(message):
    '''–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç'''
    anect = Anecdots()
    bot.send_message(message.from_user.id, anect.get_anecdot())

@bot.message_handler(commands = ["location"])
def output_(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ-–º–µ—Ç–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é'''
    bot.send_photo(message.from_user.id, "https://cim.hse.ru/data/2017/04/07/1168289132/map-web-01.png")
    bot.send_message(message.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–¥–∞–Ω–∏—è –≤—ã—à–∫–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ:\n"
                                           "–ú–∏–µ–º, –®–∞–±–æ–ª–æ–≤–∫–∞, –ü–æ–∫—Ä–æ–≤–∫–∞, –ú—è—Å–Ω–∏—Ü–∫–∞—è, –ë–∞—Å–º–∞–Ω–Ω–∞—è, –û—Ä–¥—ã–Ω–∫–∞,"
                                           " –û–¥–∏–Ω—Ü–æ–≤–æ, –î—É–±–∫–∏")

@bot.message_handler(commands=['play'])
def play_message(message):
    '''–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É - –ª–∞–±–∏—Ä–∏–Ω—Ç'''
    bot.send_message(message.from_user.id, "–¢–∞–∞–∞–∞–∫... –ö—Ç–æ-—Ç–æ –æ—Ç–≤–∞–∂–∏–ª—Å—è –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ –º–æ–µ–º—É –≤–µ–ª–∏–∫–æ–º—É –ª–∞–±–∏—Ä–∏–Ω—Ç—É‚ò†")
    time.sleep(2)
    bot.send_message(message.from_user.id,"–ï—Å–ª–∏ –ø—Ä–æ–π–¥–µ—à—å –¥–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —É–≥–ª–∞ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–∞–≥—Ä–∞–¥–∞")
    map_cell = get_map_cell(cols, rows)
    user_data = {
        'map': map_cell,
        'x': 0,
        'y': 0
    }
    maps[message.chat.id] = user_data
    bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard)

@bot.message_handler(commands = ["add"])
def start(message):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û –¥–ª—è –¥–æ–±–≤–∞–ª–µ–Ω–∏—è –Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–¥'''
    if (not user_exists(message.from_user.id)):
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
        bot.register_next_step_handler(message, FIO_)
    else:
        bot.send_message(message.from_user.id,"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def FIO_(message):
    '''–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ª–µ–∫–≤–∏–¥–∞—Ü–∏–∏ –±–µ—Å—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞'''
    global FIO
    FIO = message.text
    FIO_test(message)

def FIO_test(message):
    '''–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ª–µ–∫–≤–∏–¥–∞—Ü–∏–∏ –±–µ—Å—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞'''
    bot.send_message(message.chat.id,f"–¢–≤–æ–µ –§–ò–û - {FIO}?")
    bot.register_next_step_handler(message, FIO_test2)

def FIO_test2(message):
    '''–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –§–ò–û –≤ –±–¥'''
    if message.text == "–î–∞" or message.text == "–¥–∞":
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!")
        add_(message.chat.id)
    else:
        if message.text == "–ù–µ—Ç" or message.text == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –µ—â—ë —Ä–∞–∑:")
            bot.register_next_step_handler(message, FIO_)
        else:
            bot.send_message(query.message.chat.id, "–ß—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞, –∏–ª–∏ –Ω–µ—Ç –µ—Å–ª–∏ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –≤–≤–æ–¥–µ")
            FIO_test2(message)

def add_(message):
    '''–í–Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥'''
    add_user(message, FIO)
    add_record(rasp(FIO), message)

cols, rows = 8, 8
keyboard = telebot.types.InlineKeyboardMarkup()
keyboard.row( telebot.types.InlineKeyboardButton('‚Üê', callback_data='left'),
              telebot.types.InlineKeyboardButton('‚Üë', callback_data='up'),
              telebot.types.InlineKeyboardButton('‚Üì', callback_data='down'),
              telebot.types.InlineKeyboardButton('‚Üí', callback_data='right') )
keyboard.row(telebot.types.InlineKeyboardButton("–°–¥–∞—Ç—å—Å—è", callback_data='exit'))
maps = {}

def get_map_str(map_cell, player):
    '''–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ(–ª–∞–±–∏—Ä–∏–Ω—Ç–∞'''
    map_str = ""
    for y in range(rows * 2 - 1):
        for x in range(cols * 2 - 1):
            if map_cell[x + y * (cols * 2 - 1)]:
                map_str += "‚¨õ"
            elif (x, y) == player:
                map_str += "üî¥"
            else:
                map_str += "‚¨ú"
        map_str += "\n"
    return map_str

@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
    '''–†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã –ª–∞–±–∏—Ä–∏–Ω—Ç'''
    user_data = maps[query.message.chat.id]
    new_x, new_y = user_data['x'], user_data['y']
    if query.data == 'left':
        new_x -= 1
    if query.data == 'right':
        new_x += 1
    if query.data == 'up':
        new_y -= 1
    if query.data == 'down':
        new_y += 1
    if new_x < 0 or new_x > 2 * cols - 2 or new_y < 0 or new_y > rows * 2 - 2:
        return None
    if user_data['map'][new_x + new_y * (cols * 2 - 1)]:
        return None
    user_data['x'], user_data['y'] = new_x, new_y
    if new_x == cols * 2 - 2 and new_y == rows * 2 - 2:
        bot.edit_message_text( chat_id=query.message.chat.id,
                               message_id=query.message.id,
                               text="–°ongratulations\n+15 Social credit" )
        bot.send_animation(query.message.chat.id, "https://c.tenor.com/RvBPEdvCqHkAAAAC/social-credit.gif")
        return None
    bot.edit_message_text( chat_id=query.message.chat.id,
                           message_id=query.message.id,
                           text=get_map_str(user_data['map'], (new_x, new_y)),
                           reply_markup=keyboard )

@bot.message_handler(commands = ['chat'])
def start(message):
    '''–ó–∞–ø—É—Å–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('–ü–æ–∏—Å–∫')
    markup.add(item1)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç! –ù–∞–∂–º–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. '.format(message.from_user), reply_markup = markup)

@bot.message_handler(commands = ['stop'])
def stop(message):
    '''–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞'''
    chat_info = db.get_active(message.chat.id)
    if chat_info != False:
        db.delete_chat(chat_info[0])
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item1 = types.KeyboardButton('–ü–æ–∏—Å–∫')
        markup.add(item1)

        bot.send_message(chat_info[1], '–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞–∏–¥–µ–Ω–µ —Å –≤–∞—à–∏–º–∏ –º—ã—Å–ª—è–º–∏'.format(message.from_user), reply_markup = markup)
        bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞'.format(message.from_user), reply_markup = markup)
    else:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —á–∞—Ç'.format(message.from_user), reply_markup = markup)

@bot.message_handler(content_types = ['text'])
def bot_message(message):
    '''–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞'''
    if message.chat.type == 'private':
        if message.text == "–ü–æ–∏—Å–∫":
            markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
            item1 = types.KeyboardButton("Stop")
            markup.add(item1)

            chat_two = db.get_chat()

            if db.create_chat(message.chat.id, chat_two) == False:
                db.add_queue(message.chat.id)
                bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫", reply_markup = markup)
            else:
                mess = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /stop'
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                item1 = types.KeyboardButton("Stop")
                markup.add(item1)

                bot.send_message(message.chat.id, mess, reply_markup = markup)
                bot.send_message(chat_two, mess, reply_markup = markup)

        elif message.text == "Stop":
            db.delete_queue(message.chat.id)
            bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if message.text=="–ú–ò–ï–ú" or message.text=="–ú–∏–µ–º" or message.text=="–º–∏–µ–º" or message.text=="–ú–ï–ú":
        bot.send_location(message.from_user.id, 55.803337, 37.410132)
    if message.text == "–®–∞–±–æ–ª–æ–≤–∫–∞" or message.text == "—à–∞–±–æ–ª–æ–≤–∫–∞":
        bot.send_location(message.from_user.id, 55.720197, 37.608582)
    if message.text == "–ü–æ–∫—Ä–æ–≤–∫–∞" or message.text == "–ø–æ–∫—Ä–æ–≤–∫–∞" or message.text == "–ø–æ–∫—Ä–æ–≤—Å–∫–∞—è":
        bot.send_location(message.from_user.id, 55.754007, 37.648283)
    if message.text == "–ú—è—Å–Ω–∏—Ü–∫–∞—è" or message.text == "–º—è—Å–Ω–∏—Ü–∫–∞—è":
        bot.send_location(message.from_user.id, 55.761456, 37.633133)
    if message.text == "–ë–∞—Å–º–∞–Ω–Ω–∞—è" or message.text == "–±–∞—Å–º–∞–Ω–Ω–∞—è" or message.text == "–ë–∞—Å–º–∞–Ω–∞—è" or message.text == "–ë–∞—Å–º–∞–Ω–∞—è":
        bot.send_location(message.from_user.id, 55.766844, 37.663422)
    if message.text == "–û—Ä–¥—ã–Ω–∫–∞" or message.text == "–æ—Ä–¥—ã–Ω–∫–∞":
        bot.send_location(message.from_user.id, 55.737520, 37.626289)
    if message.text == "–û–¥–∏–Ω—Ü–æ–≤–æ" or message.text == "–æ–¥–∏–Ω—Ü–æ–≤–æ":
        bot.send_location(message.from_user.id, 55.669965, 37.279713)
    if message.text == "–î—É–±–∫–∏" or message.text == "–¥—É–±–∫–∏":
        bot.send_location(message.from_user.id, 55.660415, 37.228285)

bot.infinity_polling()